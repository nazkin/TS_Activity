[{"/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/index.tsx":"1","/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/App.tsx":"2","/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/pages/FilterCategoriesPage.tsx":"3","/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/pages/DrinkInfo.tsx":"4","/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/pages/Home.tsx":"5","/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/helpers.ts":"6","/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/api/endpoints.ts":"7","/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/components/Template.tsx":"8","/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/components/subcomponents/IngredientsDisplay.tsx":"9","/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/components/subcomponents/LoadingSpinner.tsx":"10","/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/components/HomeHero.tsx":"11","/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/components/Header.tsx":"12","/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/components/subcomponents/ButtonCustom.tsx":"13","/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/store/types.ts":"14","/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/store/models/index.ts":"15","/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/store/models/tenDrinks.model.ts":"16","/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/store/store.ts":"17"},{"size":460,"mtime":1609716579864,"results":"18","hashOfConfig":"19"},{"size":539,"mtime":1608672599784,"results":"20","hashOfConfig":"19"},{"size":486,"mtime":1609716714901,"results":"21","hashOfConfig":"19"},{"size":3236,"mtime":1608672599832,"results":"22","hashOfConfig":"19"},{"size":2670,"mtime":1608755963499,"results":"23","hashOfConfig":"19"},{"size":1010,"mtime":1608672599828,"results":"24","hashOfConfig":"19"},{"size":597,"mtime":1608672599784,"results":"25","hashOfConfig":"19"},{"size":492,"mtime":1608672599784,"results":"26","hashOfConfig":"19"},{"size":785,"mtime":1608672599828,"results":"27","hashOfConfig":"19"},{"size":917,"mtime":1608672599828,"results":"28","hashOfConfig":"19"},{"size":3228,"mtime":1608672599784,"results":"29","hashOfConfig":"19"},{"size":1435,"mtime":1608672599784,"results":"30","hashOfConfig":"19"},{"size":456,"mtime":1608672599828,"results":"31","hashOfConfig":"19"},{"size":145,"mtime":1609714139191,"results":"32","hashOfConfig":"19"},{"size":175,"mtime":1609716262024,"results":"33","hashOfConfig":"19"},{"size":1374,"mtime":1609716563812,"results":"34","hashOfConfig":"19"},{"size":303,"mtime":1609716550062,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"aczom6",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/index.tsx",[],"/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/App.tsx",[],["75"],"/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/pages/FilterCategoriesPage.tsx",["76","77"],"/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/pages/DrinkInfo.tsx",["78"],"import React, {useEffect, useState} from 'react';\nimport {RouteComponentProps} from 'react-router-dom';\nimport {Col, Row} from 'react-bootstrap';\nimport axios from 'axios';\n\nimport './page_styles/drinkInfo.css';\nimport * as apiRoutes from '../api/endpoints';\nimport * as interfaces from '../models/interfaces';\nimport {destructureCocktailIngredients} from '../helpers';\n\nimport Template from '../components/Template';\nimport IngredientsDisplay from '../components/subcomponents/IngredientsDisplay';\nimport LoadingSpinner from '../components/subcomponents/LoadingSpinner';\n\ntype DrinkDetailParams = {\n  id: string;\n};\ntype DrinkInfoProps = RouteComponentProps<DrinkDetailParams>;\n\nconst DrinkInfo: React.FC<DrinkInfoProps> = props => {\n  const currentDrinkId: string = props.match.params.id;\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [drinkInfo, setDrinkInfo] = useState<interfaces.drinkList>({\n    name: '',\n    img: '',\n    description: '',\n    ingredients: [],\n    ingredientAmounts: [],\n    instructions: '',\n  });\n\n  useEffect(() => {\n    setIsLoading(true);\n    axios({\n      method: 'GET',\n      url: `${apiRoutes.idLookup}`,\n      headers: {\n        'x-rapidapi-key': process.env.REACT_APP_API,\n        'x-rapidapi-host': 'the-cocktail-db.p.rapidapi.com',\n        useQueryString: true,\n      },\n      params: {\n        i: currentDrinkId,\n      },\n    })\n      .then(({data}) => {\n        const drinkObj: any = data.drinks[0];\n        const currentDrinkData: interfaces.drinkList = destructureCocktailIngredients(\n          drinkObj\n        );\n        setDrinkInfo(currentDrinkData);\n        setIsLoading(false);\n      })\n      .catch(err => {\n        setIsLoading(false);\n        console.log(err);\n      });\n  }, [currentDrinkId]);\n\n  const drinkImgUi = drinkInfo.img ? (\n    <img className=\"drink-img\" src={drinkInfo.img} alt=\"current drink\" />\n  ) : (\n    <h1>Waiting on Image</h1>\n  );\n  const drinkTitleUi = drinkInfo.name ? (\n    <span className=\"drink-title\">\n      <h1>{drinkInfo.name}</h1>\n      <h4>{drinkInfo.description}</h4>\n    </span>\n  ) : (\n    <span></span>\n  );\n\n  let ingredientsUi;\n  if (drinkInfo.ingredients) {\n    ingredientsUi = drinkInfo.ingredients.map((ing, index) => {\n      const infoIng: string = ing.trim();\n      let infoAmt: string;\n      if (drinkInfo.ingredientAmounts === undefined) {\n        infoAmt = '';\n      } else {\n        infoAmt = `${drinkInfo.ingredientAmounts[index].trim()}`;\n      }\n      return (\n        <IngredientsDisplay\n          displayTypeLarge={true}\n          ingredient={infoIng}\n          amount={infoAmt}\n          key={index}\n        />\n      );\n    });\n  }\n\n  return (\n    <Template>\n      {!isLoading ? (\n        <Row className=\"mx-2 d-flex flex-row justify-content-evenly\">\n          {drinkTitleUi}\n          <Col sm={7}>{drinkImgUi}</Col>\n          <Col className=\"drink-ingredients-col\" sm={5}>\n            <h1>Ingredients</h1>\n            {ingredientsUi ? ingredientsUi : null}\n            <h1>Instructions</h1>\n            <p>{drinkInfo.instructions}</p>\n          </Col>\n        </Row>\n      ) : (\n        <LoadingSpinner type=\"Puff\" color=\"#541BD6\" width={500} height={500} />\n      )}\n    </Template>\n  );\n};\n\nexport default DrinkInfo;\n","/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/pages/Home.tsx",["79"],"import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\n\nimport * as urls from '../api/endpoints';\nimport * as interfaces from '../models/interfaces';\nimport {destructureCocktailIngredients} from '../helpers';\n\nimport Hero from '../components/HomeHero';\nimport Template from '../components/Template';\nimport LoadingSpinner from '../components/subcomponents/LoadingSpinner';\n\nconst Home: React.FC<{}> = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [drinks, setDrinks] = useState<Array<interfaces.drinkList>>([\n    {\n      id: '',\n      name: '',\n      img: '',\n      description: '',\n    },\n  ]);\n  const [recommend, setRecommend] = useState<interfaces.drinkList>({\n    id: '',\n    name: '',\n    img: '',\n    description: '',\n    ingredients: [],\n    ingredientAmounts: [],\n    instructions: '',\n  });\n\n  //Fetching 10 random cockatails for the home page\n  useEffect(() => {\n    setIsLoading(true);\n\n    axios({\n      method: 'GET',\n      url: urls.tenCocktailsUrl,\n      headers: {\n        'x-rapidapi-key': process.env.REACT_APP_API,\n        'x-rapidapi-host': 'the-cocktail-db.p.rapidapi.com',\n        useQueryString: true,\n      },\n    })\n      .then(res => {\n        const arr = res.data.drinks.map((drink: any) => {\n          const obj: interfaces.drinkList = {\n            id: drink.idDrink,\n            name: drink.strDrink,\n            img: drink.strDrinkThumb,\n            description: drink.strAlcoholic + ' ' + drink.strCategory,\n          };\n          return obj;\n        });\n        setIsLoading(false);\n        setDrinks(arr);\n      })\n      .catch(err => {\n        setIsLoading(false);\n        //Error handling\n        console.log(err);\n      });\n  }, [setDrinks]);\n\n  //Fetching 1 random recipe\n  useEffect(() => {\n    axios({\n      method: 'GET',\n      url: urls.randomCocktailUrl,\n      headers: {\n        'x-rapidapi-key': process.env.REACT_APP_API,\n        'x-rapidapi-host': 'the-cocktail-db.p.rapidapi.com',\n        useQueryString: true,\n      },\n    })\n      .then(res => {\n        console.log(res.data);\n        const recommendedDrink = res.data.drinks[0];\n        const drinkData = destructureCocktailIngredients(recommendedDrink);\n        setRecommend(drinkData);\n      })\n      .catch(err => console.log(err));\n  }, [setRecommend]);\n\n  const heroUi =\n    recommend === undefined || drinks === undefined ? (\n      <div />\n    ) : (\n      <Hero recommended={recommend} drinkList={drinks} />\n    );\n  const loadingSpinner = (\n    <LoadingSpinner type=\"Puff\" color=\"#541BD6\" width={500} height={500} />\n  );\n  return <Template>{isLoading ? loadingSpinner : heroUi}</Template>;\n};\n\nexport default Home;\n","/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/helpers.ts",["80"],"import * as interfaces from './models/interfaces';\n\nexport const destructureCocktailIngredients = (\n  drinkData: any\n): interfaces.drinkList => {\n  const ingArr: Array<string> = [];\n  const amountArr: Array<string> = [];\n\n  for (let i = 0; i < 15; i++) {\n    const ithIngredient = `strIngredient${i + 1}`;\n    const ithAmount = `strMeasure${i + 1}`;\n\n    if (drinkData[ithIngredient] !== null) {\n      ingArr.push(drinkData[ithIngredient].trim());\n    }\n\n    if (!drinkData[ithAmount] && drinkData[ithIngredient]) {\n      amountArr.push('to your taste');\n    } else if (drinkData[ithAmount] && drinkData[ithIngredient]) {\n      amountArr.push(drinkData[ithAmount].trim());\n    }\n  }\n\n  const obj: interfaces.drinkList = {\n    id: drinkData.idDrink,\n    name: drinkData.strDrink,\n    img: drinkData.strDrinkThumb,\n    description: drinkData.strAlcoholic + ' ' + drinkData.strCategory,\n    ingredients: ingArr,\n    ingredientAmounts: amountArr,\n    instructions: drinkData.strInstructions,\n  };\n  return obj;\n};\n","/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/api/endpoints.ts",[],"/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/components/Template.tsx",[],"/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/components/subcomponents/IngredientsDisplay.tsx",[],"/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/components/subcomponents/LoadingSpinner.tsx",[],"/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/components/HomeHero.tsx",[],"/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/components/Header.tsx",[],"/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/components/subcomponents/ButtonCustom.tsx",[],"/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/store/types.ts",[],"/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/store/models/index.ts",[],"/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/store/models/tenDrinks.model.ts",["81"],"import {allDrinkData} from '../../models/interfaces';\nimport {TenDrinksState} from '../types';\nimport {tenCocktailsUrl} from '../../api/endpoints';\nimport {Dispatch} from '../store';\nimport axios from 'axios';\n\n// interface State {\n//   tenDrinks: Array<allDrinkData> | null;\n//   error: string;\n// }\n\nconst initState: TenDrinksState = {\n  tenDrinks: null,\n  error: '',\n};\n\nconst fetchTenDrinks = {\n  state: initState,\n  reducers: {\n    fetchDrinks(state: TenDrinksState, payload: Array<allDrinkData>) {\n      return {\n        ...state,\n        tenDrinks: payload,\n      };\n    },\n    setError(state: TenDrinksState, payload: string) {\n      return {\n        ...state,\n        error: payload,\n      };\n    },\n  },\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  effects: (dispatch: any) => ({\n    async fetchDrinkList() {\n      const {data} = await axios({\n        method: 'GET',\n        url: tenCocktailsUrl,\n        headers: {\n          'x-rapidapi-key': process.env.REACT_APP_API,\n          'x-rapidapi-host': 'the-cocktail-db.p.rapidapi.com',\n          useQueryString: true,\n        },\n      });\n\n      if (!data) {\n        dispatch.fetchTenDrinks.setError('Could not fetch drinks');\n      }\n      dispatch.fetchTenDrinks.fetchDrinks(data.drinks);\n    },\n  }),\n};\n\n// export type RootState = StateType<typeof fetchTenDrinks>\n\nexport {fetchTenDrinks};\n","/home/nazkin/Documents/Coding/TypeScript/nutri_ts/client/src/store/store.ts",[],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":3,"column":9,"nodeType":"86","messageId":"87","endLine":3,"endColumn":23},{"ruleId":"84","severity":1,"message":"88","line":7,"column":48,"nodeType":"86","messageId":"87","endLine":7,"endColumn":53},{"ruleId":"89","severity":1,"message":"90","line":48,"column":25,"nodeType":"91","messageId":"92","endLine":48,"endColumn":28,"suggestions":"93"},{"ruleId":"89","severity":1,"message":"90","line":46,"column":49,"nodeType":"91","messageId":"92","endLine":46,"endColumn":52,"suggestions":"94"},{"ruleId":"89","severity":1,"message":"90","line":4,"column":14,"nodeType":"91","messageId":"92","endLine":4,"endColumn":17,"suggestions":"95"},{"ruleId":"84","severity":1,"message":"96","line":4,"column":9,"nodeType":"86","messageId":"87","endLine":4,"endColumn":17},"no-process-exit",[],"@typescript-eslint/no-unused-vars","'TenDrinksState' is defined but never used.","Identifier","unusedVar","'props' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["97","98"],["99","100"],["101","102"],"'Dispatch' is defined but never used.",{"messageId":"103","fix":"104","desc":"105"},{"messageId":"106","fix":"107","desc":"108"},{"messageId":"103","fix":"109","desc":"105"},{"messageId":"106","fix":"110","desc":"108"},{"messageId":"103","fix":"111","desc":"105"},{"messageId":"106","fix":"112","desc":"108"},"suggestUnknown",{"range":"113","text":"114"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"113","text":"115"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"116","text":"114"},{"range":"116","text":"115"},{"range":"117","text":"114"},{"range":"117","text":"115"},[1431,1434],"unknown","never",[1256,1259],[113,116]]